{"version":3,"sources":["Utils/utils.ts","initState.ts","Components/Cell/Cell.tsx","Components/Row/Row.tsx","Components/Pattern/Pattern.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["generatePattern","rows","columns","patternArray","i","row","cells","j","push","color","clearColumn","index","pattern","newRows","forEach","r","clearRow","newPattern","c","initState","currentColor","xSym","ySym","numberColumns","numberRows","Cell","appState","rowIndex","cell","cellIndex","state","setState","handleColorChange","newRow","xSymPartner","length","ySymPartner","console","log","className","style","backgroundColor","onMouseOver","e","buttons","onMouseDown","Row","map","Pattern","onClick","App","useState","setAppState","onChange","hex","value","min","type","newNumber","Number","parseInt","target","updatePatternColumns","updatePatternRows","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3f072038.chunk.js","sourcesContent":["import {ICell, IPattern, IRow} from \"../types\";\n\nexport const generatePattern = (rows:number,columns:number) => {\n    const patternArray:IPattern = {rows: []};\n        for (let i = 0; i < rows; i++) {\n            const row: IRow = {cells: []};\n            for (let j = 0; j < columns; j++) {\n                const cell: ICell = {color: 'white'};\n                row.cells.push(cell)\n            }\n            patternArray.rows.push(row);\n        }\n    return patternArray;\n};\n\n\nexport const updatePatternRows = (rows:number,pattern:IPattern) => {\n    const patternArray:IPattern = {rows: []};\n    for (let i = 0; i < rows; i++) {\n        let row: IRow;\n            if(i < pattern.rows.length){\n                row = pattern.rows[i]\n            }else {\n                row = {cells: []};\n                for (let j = 0; j < pattern.rows[0].cells.length; j++) {\n                    const cell: ICell = {color: 'white'};\n                    row.cells.push(cell)\n                }\n            }\n        patternArray.rows.push(row);\n    }\n    return patternArray;\n};\n\nexport const updatePatternColumns = (columns:number,pattern:IPattern) => {\n    const patternArray:IPattern = {rows: []};\n    for (let i = 0; i < pattern.rows.length; i++) {\n        const row: IRow = {cells:[]};\n            for (let j = 0; j < columns; j++) {\n                let cell: ICell;\n                if(j < pattern.rows[i].cells.length) {\n                    cell = pattern.rows[i].cells[j]\n                }else {\n                    cell = {color: 'white'};\n                }\n                row.cells.push(cell)\n        }\n        patternArray.rows.push(row);\n    }\n    return patternArray;\n};\n\nexport const clearColumn = (index:number,pattern:IPattern) => {\n    const newRows = pattern.rows;\n    newRows.forEach(r => r.cells[index] = {color: 'white'});\n    const newPattern:IPattern = {rows: newRows}\n    return newPattern\n};\n\nexport const clearRow = (index:number,pattern:IPattern) => {\n    const newPattern = pattern;\n    newPattern.rows[index].cells.forEach(c => c.color = 'white');\n    return newPattern\n};","import {IPattern} from \"./types\";\nimport {generatePattern} from \"./Utils/utils\";\n\nexport interface IState {\n    numberRows: number,\n    numberColumns: number,\n    xSym: boolean,\n    ySym: boolean,\n    pattern:IPattern,\n    currentColor: string,\n}\n\nexport const initState:IState = {\n    currentColor: 'red',\n    xSym: true,\n    ySym: true,\n    numberColumns: 10,\n    numberRows: 10,\n    pattern: generatePattern(10,10),\n};","import React, {Dispatch, SetStateAction, useState} from 'react';\nimport {ICell, IPattern} from \"../../types\";\nimport {IState} from \"../../initState\";\n\ninterface ICellProps {\n    rowIndex:number,\n    cellIndex:number,\n    pattern:IPattern,\n    cell:ICell\n    appState:  [IState, Dispatch<SetStateAction<IState>>]\n}\n\nconst Cell:React.FC<ICellProps> = ({appState,rowIndex,cell,cellIndex,pattern}) => {\n\n    const [state,setState] = appState;\n\n    const handleColorChange = () => {\n        const newRow = state.pattern.rows;\n        const color = state.currentColor;\n        newRow[rowIndex].cells[cellIndex].color = color;\n\n        if(state.xSym && !state.ySym){\n            const xSymPartner = newRow[rowIndex].cells.length - 1 - cellIndex;\n            newRow[rowIndex].cells[xSymPartner].color = color;\n        }\n        else if(state.ySym && !state.xSym){\n            const ySymPartner = newRow.length - 1 - rowIndex;\n            newRow[ySymPartner].cells[cellIndex].color = color;\n        }else if (state.xSym && state.ySym) {\n            const ySymPartner = newRow.length - 1 - rowIndex;\n            const xSymPartner = newRow[rowIndex].cells.length - 1 - cellIndex;\n            // set the x sym color\n            newRow[rowIndex].cells[xSymPartner].color = color;\n            // set the y sym color\n            newRow[ySymPartner].cells[cellIndex].color = color;\n            //set the x y sym color\n            newRow[ySymPartner].cells[xSymPartner].color = color;\n        }\n\n        setState({\n            ...state,\n            pattern: {\n                rows: newRow\n            }\n            });\n        console.log(state)\n    };\n\n    return (\n        <div className={`h2 w2 ba`} style={{backgroundColor: cell.color}} onMouseOver={e => {e.buttons === 1 && handleColorChange()}} onMouseDown={handleColorChange}/>\n    );\n};\n\nexport default Cell;\n","import React, {Dispatch, SetStateAction} from 'react';\nimport Cell from \"../Cell/Cell\";\nimport {ICell, IPattern} from \"../../types\";\nimport {IState} from \"../../initState\";\n\ninterface IRowProps {\n    cells: ICell[]\n    pattern: IPattern\n    rowIndex:number\n    state:  [IState, Dispatch<SetStateAction<IState>>]\n}\n\nconst Row:React.FC<IRowProps> = ({state,cells,pattern,rowIndex}) => {\n\n    return (\n        <div className={'flex'}>\n            {cells.map((cell,index) => <Cell appState={state} cell={cell} rowIndex={rowIndex} cellIndex={index} pattern={pattern}/>)}\n        </div>\n);\n};\n\nexport default Row;\n","import React, {Dispatch, SetStateAction, useState} from 'react';\nimport {IPattern} from \"../../types\";\nimport Row from \"../Row/Row\";\nimport {IState} from \"../../initState\";\nimport {clearColumn, clearRow, generatePattern} from \"../../Utils/utils\";\n\ninterface IPatternProps {\n    pattern:IPattern\n    state: [IState, Dispatch<SetStateAction<IState>>]\n}\n\nconst Pattern:React.FC<IPatternProps> = ({pattern,state}) => {\n\n    const [appState,setState] = state;\n\n    return (\n        <div className={'no-select'}>\n            <div className={'flex'}>\n                <button className={'f7 w2'}\n            // Clears whole pattern\n                onClick={() => setState({...appState,pattern: generatePattern(appState.numberRows,appState.numberColumns)})}\n                > x all </button>\n\n\n            {pattern.rows[0].cells.map((cell,index) =>\n                <div >\n                    <button\n                        className={'h2 w2 ma0 pa0'}\n                    // Clears individual columns\n                        onClick={() => setState({...appState, pattern: clearColumn(index,appState.pattern)})}\n                    > x </button>\n                </div>\n            )}\n            </div>\n\n            {pattern.rows.map((row,index) =>\n                <div className={'flex'}>\n                    <button className={'w2'}\n                            onClick={() => setState({...appState, pattern: clearRow(index,appState.pattern)})}\n                    > x </button>\n                    <Row state={state} cells={row.cells} rowIndex={index} pattern={pattern} />\n                </div>)}\n        </div>\n    );\n};\n\nexport default Pattern;\n","import React, {useState} from 'react';\nimport {initState} from \"./initState\";\nimport Pattern from \"./Components/Pattern/Pattern\";\nimport { CompactPicker } from 'react-color';\nimport {generatePattern, updatePatternColumns, updatePatternRows} from \"./Utils/utils\";\n\nconst App:React.FC = () => {\n    const [appState,setAppState] = useState(initState);\n  return (\n    <div className=\"app\">\n        <div className={'flex no-select'}>\n        <div>\n            <CompactPicker color={appState.currentColor} onChange={e => setAppState({...appState,currentColor: e.hex})}/>\n        </div>\n            <div>\n                <div className={'tc h2 no-select'}\n                 onClick={() => setAppState({...appState, xSym: !appState.xSym})}\n                 style={{backgroundColor: `${appState.xSym ? 'lightgreen' : ''}`}}\n                > X Symmetry </div>\n                <div className={'tc h2 no-select'}\n                 onClick={() => setAppState({...appState, ySym: !appState.ySym})}\n                 style={{backgroundColor: `${appState.ySym ? 'lightgreen' : ''}`}}\n                > Y Symmetry </div>\n                <div className={'flex flex-column w4'}>\n                        <div>Columns: </div>\n                    <input value={appState.numberColumns} className={'w3 ml1'} min={'2'} type={'number'}\n                           onChange={(e) => {\n                               const newNumber = Number.parseInt(e.target.value);\n                               const newPattern = updatePatternColumns(newNumber,appState.pattern);\n                               setAppState({...appState, pattern: newPattern, numberColumns: newNumber})\n                           }} />\n                    </div>\n\n                        <div>Rows: </div>\n                    <input value={appState.numberRows} className={'w3 ml1'} min={'2'} type={'number'}\n                           onChange={(e) => {\n                               const newNumber = Number.parseInt(e.target.value);\n                               const newPattern = updatePatternRows(newNumber,appState.pattern);\n                               setAppState({...appState, pattern: newPattern, numberRows: newNumber})\n                           }} />\n                </div>\n\n        </div>\n      <Pattern state={[appState,setAppState]} pattern={appState.pattern}/>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}